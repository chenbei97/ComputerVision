<1> 图像的采样
（1）上采样
    1）聚合值：最近的一个或者多个像素邻域值的平均值
    2）使用双线性或者三次插值的像素邻域内插值 P44页
    设四个已知点坐标Q11,Q21,Q12,Q22为(x1,y1)(x2,y1)(x1,y2)(x2,y2),待插值点坐标(x,y)
    实际上点(x,y)处的像素强度等于4个像素点强度与对应小矩形区域占据总面积的比例乘积和
    f(x,y) ≈ [ f(Q11)(x2-x)(y2-y) + f(Q21)(x-x1)(y2-y) + f(Q12)(x2-x)(y-y1) + f(Q22)(x-x1)(y-y1) ] / (x2-x1)(y2-y1 )
    3）双线性插值的结果与先进行哪个方向的插值无关
    4）双三次插值优于前述两种方法，可使用拉格朗日多项式、三次样条和三次卷积完成
（2） 下采样
    1）以系统方式从较大图像删除一些像素,如可以隔行/列删除
    2）使用聚合值生成，如对区域求平均而非最近原则
<2> 图像的量化
    1）图像中每个像素使用的比特数来定义图像强度,比特数越少量化误差越大 导致假边界、假轮廓和像素化
    2）图像信噪比SNR：图像数组的均值/图像数组的标准差 越大越好
    3）colors=256表示需要0-255之间的数去描述像素强度 在计算机中为8bit存储
    4）最简单的2bit存储即二值图像,只用255和0来表示图像,可以通过改变colors的默认bit来观察图像信噪比变化
    5）彩色图像RGB三个通道，实际上存储24bit
    6）PIL图像格式转换网站参考：https://blog.csdn.net/zong596568821xp/article/details/83151743
<3> 离散傅里叶变换 DFT : 图像处理只需关注二维离散
（1）概念
    1）将基本图像看成二维函数F，此函数表示成二个维度上正弦和余弦的加权和，逆变换为IDFT
    2）频域的低频对应图像中信息的平均总体水平，高频对应边缘、噪声和更详细的信息
    3）频域进行滤波比时间域快，因为频域中一个图像只需要少量的DFT系数描述，其余可忽略为0
（2）性质
    1）可分离性：先对f(x,y)的行N个点作一维傅里叶变换得到F(x,v),再对列的M个点作变换得到F(u,v),逆变换则是先列后行
    2）周期性：F(u,v) = F(u±kN,v±kN)
    3）共轭对称性：F(u)=F(-u)一维信号原点为0频率点，为直流分量; F(u,v)=F(-u,-v)二维信号则是F(0,0)左上角和其他3个角,0频率的值对应图像平均灰度值
    4）平移性：
        ① 频域原点移动到(u0,v0)那么空间域f(x,y)需乘上正的指数项exp(j2*pi(u0*x/M+v0*y/N))
        ② 时域图像原点平移到(x0,y0)那么频域F(u,v)乘上负的指数项exp(-j2*pi(x0*u/m+y0*v/N))
        例如需要将频域的左上角原点移动到M×N的中心,只需要令u0=M/2,v0=N/2即可，相应的低频成分集中在频域中心
        ③ 空域或者频域进行平移时不会影响幅值只会影响相位
    5）旋转性：f(x,y)和F(u,v)会旋转相同的角度,且先傅里叶变换再旋转和先旋转再傅里叶变换等价
    6）卷积定理：时域信号的卷积等于频域的乘积f(x,y)*h(x,y)-->F(u,v)×H(u,v)

（3）快速傅里叶变换FFT
    1）时间复杂度为O(Nlog2(N)),比DFT的O(N^2)快得多
    2）numpy和scipy均可计算2D的DFT/IDFT

<4> 相关和卷积的区别 : 可用于互相关也可用于卷积计算
参考网址 ： https://www.cnblogs.com/long5683/p/9675691.html
    1）1维拉普拉斯运算可以通过1维卷积核[1,-2,1]实现
    2）2维拉普拉斯运算可以通过2维卷积核，常见的二维卷积核为
    3）sobel算子、Laplacian算子、scharr滤波器 scharr配合sobel算子实现，[[-3-3j,0-10j,3-3j],[-10,0,10],[-3+3j,10j,3+3j]]
    4）卷积核大体上分为亮化，锐化，模糊，浮雕，轮廓线，边界线六种类型
        ① 锐化 [[0,edge,0],[edge,inner,edge],[0,edge,0]]
           (laplace)[[0,1,0],[1,-4,1],[0,1,0]
        ② 浮雕 [[-diag,-iden,0],[-iden,iden,iden],[0,iden,diag]]
           [[-2,-1,0],[-1,1,1],[0,1,2]]
        ③ 模糊 [[cornor,edge,cornor],[edge,inner,edge],[cornor,edge,cornor]]
           [[1,1,1],[1,-8,1],[1,1,1]
        ④ 量化 [[0,0,0],[0,iden,0],[0,0,0]]
        ⑤ 轮廓线 [[outer,outer,outer],[outer,inner,outer],[outer,outer,outer]]
        ⑥ 边缘检测
            left [[cornor,edge,cornor],[0,0,0],[-cornor,-edge,-cornor]]
            right [[-cornor,-edge,-cornor],[0,0,0],[cornor,edge,cornor]]
            bottom [[cornor,0,-cornor],[edge,0,-edge],[cornor,0,-cornor]]
            top [[-cornor,0,cornor],[-edge,0,edge],[-cornor,0,cornor]]


