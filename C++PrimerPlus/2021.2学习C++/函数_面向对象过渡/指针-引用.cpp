#include <iostream>
using namespace std;
// 常量指针 - 值不改变
void const_pointer()
{
	int a = 10;
	const int* p = &a;
	cout << "常量指针测试<地址可以修改――值不可以修改> : " << endl;
	cout << "\t常量指针p的地址为 :  " << p << endl;
	cout << "\t常量指针*p的值为 :  " << *p << endl;
	p = p + 1;
	cout << "\t常量指针求p=p+1的地址合法为(赋地址操作) :  " << p << endl;
	//*p = *p + 1;
	cout << "\t常量指针求*p=*p+1的值非法(赋值操作)" << endl;
	
	// 指向可以修改
	int b = 20;
	p = &b;
	cout << "\t常量指针求p=&b的地址合法(赋地址操作),其地址为 : " << p  << endl;
	
	//*p = 20; 值不可以修改
	cout << "\t常量指针求*p=20的值非法(赋值操作) " << endl;

}
//指针常量 - 地址不改变
void pointer_const()
{
	int a = 10;
	int*  const  p = &a; 
	cout << "指针常量测试<值可以修改――地址不可以修改> : " << endl;
	cout << "\t指针常量p的地址为 :  " << p << endl;
	cout << "\t指针常量*p的值为 :  " << *p << endl;
	//int  * const * p1 =&p + 1;
	//p = p + 1;
	cout << "\t指针常量求p=p+1的地址非法(赋地址操作)  " << endl;
	*p = *p + 1 ;
	cout << "\t指针常量求*p =*p+1的值合法(赋值操作)  :  " << *p << endl;

	// 指向不可以修改
	int b = 20;
	//p = &b;
	cout << "\t指针常量求p=&b的地址非法(赋地址操作)" <<  endl;

	*p = 20; //值可以修改
	cout << "\t指针常量求*p=20的值*p合法(赋值操作) : " <<  *p <<endl;

}
// 纯常量指针 - 地址和值都不改变
void const_pointer_const()
{
	int a = 10;
	const int* const  p = &a;
	cout << "纯常量指针测试<值不可以修改――地址不可以修改> : " << endl;
	cout << "\t纯常量指针p的地址为 :  " << p << endl;
	cout << "\t纯常量指针*p的值为 :  " << *p << endl;
	//p = p + 1
	//const int * const  * p1 = &p + 1;
	cout << "\t纯常量指针求p=p+1的地址非法(赋地址操作)  " << endl;
	//*p = *p + 1;
	cout << "\t纯常量指针求*p =*p+1的值非法(赋值操作)" << endl;

	// 指向不可以修改
	int b = 20;
	//p = &b;
	cout << "\t纯常量指针求p=&b的地址非法(赋地址操作)" << endl;

	//*p = 20; //值不可以修改
	cout << "\t纯常量指针求*p=20的值*p非法(赋值操作) " <<endl;


}
// 常量引用 - 值不变
void const_quote()
{
	const int  p = 10; // 就是普通的变量加上const限定
	cout << "常量引用测试<值不可以修改――地址可以修改> : " << endl;
	cout << "\t常量引用&p的地址为 :  " << &p << endl;
	cout << "\t常量引用p的值为 :  " << p << endl;
	//p = p + 1;
	cout << "\t常量引用求p=p+1的值非法(赋值操作)"  << endl;
	//*p = *p + 1; // 这里没有指针
	// &p =&p+1 ;
	cout << "\t常量引用求&p=&p+1的地址非法(赋地址操作) " << endl;
	//int* p1 = &p + 1; //非法 
	const int* p1 = &p + 1; //合法 因为p的值不改变只能用常量指针而不能用普通指针
	cout << "\t常量引用求int* p1 = &p + 1非法(普通指针接收非法,值不能改变)" << endl; 
	cout << "\t常量引用求const int* p1 = &p + 1的值合法(需要常量指针接收)"<<"\n\t*p1是p1的值也是(&p + 1)的地址" << * p1 <<endl;
	cout << "\t常量指针求const int* p1 = &p + 1的地址合法(需要常量指针接收) :  " << p1 << endl;

	//指向不可以修改
	int b = 20;
	//p = &b;
	cout << "\t常量引用求p=&b的地址非法--->p不是指针(赋地址操作)" << endl;
	//p = 20;// 值不可以修改
	//*p =20 ; // 这里没有指针
	cout << "\t常量引用求p=20的非合法--->p值不能改变(赋值操作) "  << endl;
}
// 引用常量 - 地址不改变
void quote_contst()
{
	int a = 10;
	int& p = a; // 把p看成a就行 <――>等价于int * const p = &a  指针常量
	//int& p = 10; //非法
	cout << "引用常量测试<值可以修改――地址不可以修改> : " << endl;
	cout << "\t引用常量&p的地址为 :  " << &p << endl;
	cout << "\t引用常量p的值为 :  " << p << endl;
	p = p + 1;
	cout << "\t引用常量求p=p+1的值合法(赋值操作) :   " << p << endl;
	//*p = *p + 1; // 这里没有指针
	//&p = &p + 1;
	cout << "\t引用常量求&p=&p+1的地址(赋地址操作)非法 " <<  endl;
	int* p3 = &p + 1; //普通指针接收合法,地址不能改变
	cout << "\t引用常量求const int*p3 =&p+1的值合法(普通指针接收合法,地址不能改变)" << *p3 <<endl;
	cout << "\t引用常量求const int*p3 =&p+1的地址合法(普通指针接收合法,地址不能改变)" << p3 << endl;
	const int* p4 = &p + 1;//常量指针接收合法,地址不能改变
	cout << "\t引用常量求int*p1=&p+1的值合法(常量指针接收合法,地址不能改变)" << *p4 << endl;
	cout << "\t引用常量求int*p1=&p+1的地址合法(常量指针接收合法,地址不能改变)" << p4 << endl;
	
	 //指向不可以修改
	int b = 20;
	//p = &b;
	cout << "\t引用常量求p=&b的地址非法(赋地址操作)" << endl;

	p = 20;// 值可以修改
	// *p =20 ; // 这里没有指针
	cout << "\t引用常量求p=20的值合法(赋值操作) : " << p << endl;

}
// 纯常量引用 - 地址和值都不改变(因为引用本身就是指针常量了再加上const限定变成纯常量)
void const_quote_const()
{
	int a = 10;
	const int& p = a; // 把p看成a就行 <――>等价于const int * const p = &a  值/地址都是常量
	cout << "纯常量引用测试<值不可以修改――地址不可以修改> : " << endl;
	cout << "\t纯常量引用&p的地址为 :  " << &p << endl;
	cout << "\t纯常量引用p的值为 :  " << p << endl;
	//p = p + 1;
	cout << "\t纯常量引用求p=p+1的值非法(赋值操作)" <<  endl;
	//&p = &p + 1;
	cout << "\t纯常量引用求&p=&p+1的地址非法(赋地址操作) " << endl;
	const int *p1 = &p + 1; // 与常量引用的情况一致  ------>  83行代码 
	cout << "\t纯常量引用求int* p1 = &p + 1非法(普通指针接收非法,值不能改变)" << endl;
	cout << "\t纯常量引用求const int* p1 = &p + 1的值合法(需要常量指针接收) : " << *p1 << endl;
	cout << "\t纯常量指针求const int* p1 = &p + 1的地址合法(需要常量指针接收) : " << p1 << endl;

	//指向不可以修改
	int b = 20;
	//p = &b;
	cout << "\t纯常量引用求p=&b的地址非法(赋地址操作)" << endl;

	//p = 20;// 值也不可以修改
	// *p =20 ; // 这里没有指针
	cout << "\t纯常量引用求p=20的值非法(赋值操作) " << endl;

}
//int main()
void quote_pointer() 
{
	/*
	1. ―― 常量指针――固定值不固定地址
	定义格式---------------> const int* p = &a ;
	地址接收---------------> p = p +1 ; 
	数值接收---------------> *p =*p +1 ; (非法)
	
	2.――指针常量――固定地址不固定值
	定义格式---------------> int * const p = & a ;
	地址接收---------------> p =p +1 ;(非法) int  * const * p1 =&p + 1; (合法)  
	数值接收---------------> *p = *p + 1 ; (合法)
	
	3.――纯常量指针――固定值也固定地址
	定义格式---------------> const int * const p = &a;
	地址接收--------------->  p=p+1 ;(非法) const int * const  * p1 = &p + 1;(合法)
	数值接收---------------> *p = *p + 1;(非法)
	
	4.――常量引用――固定值不固定地址
	定义格式---------------> const int p =10 ; 
	地址接收--------------->p =p +1 ;(非法)  const int* p1 = &p  ;(合法)
	数值接收---------------> p = p + 1;(非法)
	
	5.――引用常量――固定地址不固定值
	定义格式---------------> int &b = a  ;(合法)  int &b =10  ;(非法) 
	地址接收--------------->int* p3 = &p + 1;(合法) 或const int* p4 = &p + 1;(合法)
	数值接收--------------->p = p + 1; 

	6.――纯常量引用――固定值也固定地址
	定义格式---------------> const int &b = a ; (合法)  const int &b = 10 ;(合法) 
	地址接收---------------> int* p1 = &p + 1;(非法)   const int *p1 = &p + 1; (合法)
	数值接收---------------> p = p +1 ;(非法)
	*/
	const_pointer(); // 1
	pointer_const(); // 2
	const_pointer_const(); //3
	const_quote();// 4
	quote_contst(); //5
	const_quote_const(); //6



	//system("pause");
	//return 0;
}